/*
 * Copyright (C) 2012  ST Electronics (Satcom & Sensor Systems) Pte Ltd 
 *
 * Agilis Device Manager Header
 *
 */

#ifndef _AGILISDEVICEMANAGER_H_
#define _AGILISDEVICEMANAGER_H_

#include "define.h"

//#include "TCPIP Stack/Tick.h"
#include "AgilisProtocol.h"

#define RESPONSE_TIMER			100 	// once every 20 main() cycle
#define POLLING_TIMER			5000	// once every 100 main() cycle
#define SERVER_NOCOMM_COUNT		500 	// no comm after 10 seconds


#if defined(RCU)
#define MAX_CLIENT 		3 // PC, LCD and WiFi
#define MAX_SERVER 		2 // 2 BUC
#define NUM_AGILIS_SERVER_INSTANCE	1  // 1 server instance to handle all PC/LCD/WiFi clients
#define NUM_AGILIS_CLIENT_INSTANCE	MAX_SERVER  // multiple client instances based on number of servers
#endif


typedef enum _AgilisDeviceRDInfo_t{
	AgilisDeviceRDInfoModelNumber=0,
	AgilisDeviceRDInfoSerialNumber		
}AgilisDeviceRDInfo_t;

typedef enum _AgilisDeviceType_t{
	AgilisDeviceTypeServer=0,
	AgilisDeviceTypeClient
}AgilisDeviceType_t;

typedef enum _AgilisDeviceStatus_t{
	AgilisDeviceStatusNoComm=0,
	AgilisDeviceStatusOnline
}AgilisDeviceStatus_t;

#define BUC_STATUS_AS_READY		(1<<0)	// BUC AS status is ready
#define BUC_STATUS_DA_READY		(1<<1)	// BUC DA status is ready
#define BUC_STATUS_PN_READY		(1<<2)	// BUC part number is ready
#define BUC_STATUS_SN_READY		(1<<3) 	// BUC serial number is ready
#define BUC_STATUS_VE_READY		(1<<4)	// BUC firmware version is ready
#define SSPA_STATUS_BV_READY	(1<<5)	// SSPA BV status is ready
#define SSPA_STATUS_RF_READY	(1<<6)	// SSPA RF status is ready
#define SSPA_STATUS_BS_READY	(1<<7)	// SSPA BS status is ready

typedef AgilisCmdStatus_t (*CmdTableLookupFunc)(char *, BYTE *);


typedef struct _AgilisDeviceServer_t{
	UINT8 totalCmdNum;
	AgilisCmdTable_t *pCmdTable;	// server command function table
	AgilisDriverDescriptor_t *pUARTClient[MAX_CLIENT]; 	// uart port to client 1 (PC/ASRC) and client 2 (WiFi)
	AgilisDriverDescriptor_t *pUARTServer[MAX_SERVER]; 	// uart port to server 1 (BUC-1) and server 2 (BUC-2)
	void (*pRespondFunc)(void *);
}AgilisDeviceServer_t;

typedef struct _AgilisDeviceClient_t{
	UINT8 totalCmdNum;
	AgilisCmdTable_t *pCmdTable;	 // client command function table
	AgilisDriverDescriptor_t *pUARTServer; 	// uart port to BUC/AUC server
	AgilisDeviceStatus_t serverCommStatus; // communication status of server
	BOOL pollCounter;
	UINT16 serverNoCommCount;
	UINT8 serverStatus;
	void (*pResetServerInfoFunc)(BYTE);
	void (*pPollFunc)(void *, UINT8 numServer);
	void (*pRespondFunc)(void *, UINT8 numServer);
}AgilisDeviceClient_t;


extern UINT8 gAgilisWriteBuf[AGILIS_PROTOCOL_UARTBUF_SIZE];
extern UINT8 gAgilisReadBuf[AGILIS_PROTOCOL_UARTBUF_SIZE];

AgilisCmdStatus_t AgilisDeviceManagerInit(void);
AgilisCmdStatus_t AgilisDeviceManagerRegisterClient(AgilisDeviceClient_t *pClient);
void AgilisDeviceManagerProcessClient(AgilisDeviceClient_t *pClient);
AgilisCmdStatus_t AgilisDeviceManagerRegisterServer(AgilisDeviceServer_t *pServer);
void AgilisDeviceManagerProcessServer(AgilisDeviceServer_t *pServer);
void AgilisDeviceManagerBUCClientPoll(void);
void AgilisDeviceManagerRCUServerRespond(void);
void AgilisDeviceManagerPollBUCServerInfo(AgilisDeviceClient_t *pClient, UINT8 serverNum);
AgilisDeviceClient_t *AgilisDeviceManagerGetBUCClient(UINT8 numClient);
void AgilisDeviceManagerHandler(void);
void AgilisDeviceManagerStdClientRespond(void *p, UINT8 numServer);

#endif // _AGILISDEVICEMANAGER_H_


