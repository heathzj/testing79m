/**************************************************************
 * HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 **************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_CONN curHTTP;
extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_ID(void);
void HTTPPrint_RCUModel(void);
void HTTPPrint_RCUSerial(void);
void HTTPPrint_dhcp_status(void);
void HTTPPrint_config_ip(void);
void HTTPPrint_config_subnet(void);
void HTTPPrint_config_gw(void);
void HTTPPrint_RCUfwver(void);
void HTTPPrint_comMode(void);
void HTTPPrint_buc1id(void);
void HTTPPrint_buc1Model(void);
void HTTPPrint_buc1Serial(void);
void HTTPPrint_buc1fwver(void);
void HTTPPrint_buc2id(void);
void HTTPPrint_buc2Model(void);
void HTTPPrint_buc2Serial(void);
void HTTPPrint_buc2fwver(void);
void HTTPPrint_setpasscolor(void);
void HTTPPrint_setpass(void);
void HTTPPrint_pathselect(void);
void HTTPPrint_swmode(void);
void HTTPPrint_buc1Outpower(void);
void HTTPPrint_buc1Atten(void);
void HTTPPrint_buc1rfop(void);
void HTTPPrint_buc1temp(void);
void HTTPPrint_buc2Outpower(void);
void HTTPPrint_buc2Atten(void);
void HTTPPrint_buc2rfop(void);
void HTTPPrint_buc2temp(void);
void HTTPPrint_maf(void);
void HTTPPrint_mas(void);
void HTTPPrint_MIP(void);
void HTTPPrint_config_mac(void);
void HTTPPrint_pathAalarm(void);
void HTTPPrint_pathBalarm(void);
void HTTPPrint_PS1alarm(void);
void HTTPPrint_PS2alarm(void);
void HTTPPrint_OCXO1alarm(void);
void HTTPPrint_OCXO2alarm(void);
void HTTPPrint_buc1Comalarm(void);
void HTTPPrint_buc2Comalarm(void);
void HTTPPrint_led(WORD);
void HTTPPrint_ned(WORD);
void HTTPPrint_comModeSelected(WORD);
void HTTPPrint_config_dhcpchecked(void);
void HTTPPrint_static_ip(void);
void HTTPPrint_swmodeSelected(WORD);
void HTTPPrint_pathSelected(WORD);
void HTTPPrint_maxattn(WORD);
void HTTPPrint_buc1rfSelected(WORD);
void HTTPPrint_buc2rfSelected(WORD);
void HTTPPrint_read_comm(WORD);
void HTTPPrint_write_comm(WORD);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPIncFile((ROM BYTE*)"header.inc");
			break;
        case 0x00000001:
			HTTPIncFile((ROM BYTE*)"footer.inc");
			break;
        case 0x00000002:
			HTTPPrint_ID();
			break;
        case 0x00000003:
			HTTPPrint_RCUModel();
			break;
        case 0x00000004:
			HTTPPrint_RCUSerial();
			break;
        case 0x00000005:
			HTTPPrint_dhcp_status();
			break;
        case 0x00000006:
			HTTPPrint_config_ip();
			break;
        case 0x00000007:
			HTTPPrint_config_subnet();
			break;
        case 0x00000008:
			HTTPPrint_config_gw();
			break;
        case 0x00000009:
			HTTPPrint_RCUfwver();
			break;
        case 0x0000000a:
			HTTPPrint_comMode();
			break;
        case 0x0000000b:
			HTTPPrint_buc1id();
			break;
        case 0x0000000c:
			HTTPPrint_buc1Model();
			break;
        case 0x0000000d:
			HTTPPrint_buc1Serial();
			break;
        case 0x0000000e:
			HTTPPrint_buc1fwver();
			break;
        case 0x0000000f:
			HTTPPrint_buc2id();
			break;
        case 0x00000010:
			HTTPPrint_buc2Model();
			break;
        case 0x00000011:
			HTTPPrint_buc2Serial();
			break;
        case 0x00000012:
			HTTPPrint_buc2fwver();
			break;
        case 0x00000013:
			HTTPPrint_setpasscolor();
			break;
        case 0x00000014:
			HTTPPrint_setpass();
			break;
        case 0x00000015:
			HTTPPrint_pathselect();
			break;
        case 0x00000016:
			HTTPPrint_swmode();
			break;
        case 0x00000017:
			HTTPPrint_buc1Outpower();
			break;
        case 0x00000018:
			HTTPPrint_buc1Atten();
			break;
        case 0x00000019:
			HTTPPrint_buc1rfop();
			break;
        case 0x0000001a:
			HTTPPrint_buc1temp();
			break;
        case 0x0000001b:
			HTTPPrint_buc2Outpower();
			break;
        case 0x0000001c:
			HTTPPrint_buc2Atten();
			break;
        case 0x0000001d:
			HTTPPrint_buc2rfop();
			break;
        case 0x0000001e:
			HTTPPrint_buc2temp();
			break;
        case 0x0000001f:
			HTTPPrint_maf();
			break;
        case 0x00000020:
			HTTPPrint_mas();
			break;
        case 0x00000021:
			HTTPPrint_MIP();
			break;
        case 0x00000022:
			HTTPPrint_config_mac();
			break;
        case 0x00000023:
			HTTPPrint_pathAalarm();
			break;
        case 0x00000024:
			HTTPPrint_pathBalarm();
			break;
        case 0x00000025:
			HTTPPrint_PS1alarm();
			break;
        case 0x00000026:
			HTTPPrint_PS2alarm();
			break;
        case 0x00000027:
			HTTPPrint_OCXO1alarm();
			break;
        case 0x00000028:
			HTTPPrint_OCXO2alarm();
			break;
        case 0x00000029:
			HTTPPrint_buc1Comalarm();
			break;
        case 0x0000002a:
			HTTPPrint_buc2Comalarm();
			break;
        case 0x0000002b:
			HTTPPrint_led(0);
			break;
        case 0x0000002c:
			HTTPPrint_led(1);
			break;
        case 0x0000002d:
			HTTPPrint_led(2);
			break;
        case 0x0000002e:
			HTTPPrint_led(3);
			break;
        case 0x0000002f:
			HTTPPrint_led(4);
			break;
        case 0x00000030:
			HTTPPrint_led(5);
			break;
        case 0x00000031:
			HTTPPrint_led(6);
			break;
        case 0x00000032:
			HTTPPrint_led(7);
			break;
        case 0x00000033:
			HTTPPrint_ned(0);
			break;
        case 0x00000034:
			HTTPPrint_ned(1);
			break;
        case 0x00000035:
			HTTPPrint_ned(2);
			break;
        case 0x00000036:
			HTTPPrint_ned(3);
			break;
        case 0x00000037:
			HTTPPrint_ned(4);
			break;
        case 0x00000038:
			HTTPPrint_ned(5);
			break;
        case 0x00000039:
			HTTPPrint_ned(6);
			break;
        case 0x0000003a:
			HTTPPrint_ned(7);
			break;
        case 0x0000003b:
			HTTPPrint_comModeSelected(TRUE);
			break;
        case 0x0000003c:
			HTTPPrint_comModeSelected(FALSE);
			break;
        case 0x0000003d:
			HTTPPrint_config_dhcpchecked();
			break;
        case 0x0000003e:
			HTTPPrint_static_ip();
			break;
        case 0x0000003f:
			HTTPPrint_swmodeSelected(FALSE);
			break;
        case 0x00000040:
			HTTPPrint_swmodeSelected(TRUE);
			break;
        case 0x00000041:
			HTTPPrint_pathSelected(TRUE);
			break;
        case 0x00000042:
			HTTPPrint_pathSelected(FALSE);
			break;
        case 0x00000043:
			HTTPPrint_maxattn(1);
			break;
        case 0x00000044:
			HTTPPrint_buc1rfSelected(TRUE);
			break;
        case 0x00000045:
			HTTPPrint_buc1rfSelected(FALSE);
			break;
        case 0x00000046:
			HTTPPrint_maxattn(2);
			break;
        case 0x00000047:
			HTTPPrint_buc2rfSelected(TRUE);
			break;
        case 0x00000048:
			HTTPPrint_buc2rfSelected(FALSE);
			break;
        case 0x00000049:
			HTTPPrint_read_comm(0);
			break;
        case 0x0000004a:
			HTTPPrint_read_comm(1);
			break;
        case 0x0000004b:
			HTTPPrint_read_comm(2);
			break;
        case 0x0000004c:
			HTTPPrint_write_comm(0);
			break;
        case 0x0000004d:
			HTTPPrint_write_comm(1);
			break;
        case 0x0000004e:
			HTTPPrint_write_comm(2);
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
