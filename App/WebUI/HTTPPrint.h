/**************************************************************
 * HTTPPrint.h
 * Provides callback headers and resolution for user's custom
 * HTTP Application.
 * 
 * This file is automatically generated by the MPFS Utility
 * ALL MODIFICATIONS WILL BE OVERWRITTEN BY THE MPFS GENERATOR
 **************************************************************/

#ifndef __HTTPPRINT_H
#define __HTTPPRINT_H

#include "TCPIP Stack/TCPIP.h"

#if defined(STACK_USE_HTTP2_SERVER)

extern HTTP_CONN curHTTP;
extern HTTP_STUB httpStubs[MAX_HTTP_CONNECTIONS];
extern BYTE curHTTPID;

void HTTPPrint(DWORD callbackID);
void HTTPPrint_config_ip(void);
void HTTPPrint_config_subnet(void);
void HTTPPrint_config_gw(void);
void HTTPPrint_Devicefwver(void);
void HTTPPrint_setpasscolor(void);
void HTTPPrint_setpass(void);
void HTTPPrint_converterarffreq(void);
void HTTPPrint_converteraatten(void);
void HTTPPrint_converteralo(void);
void HTTPPrint_outputpowera(void);
void HTTPPrint_setpowera(void);
void HTTPPrint_ALCa(void);
void HTTPPrint_Mutea(void);
void HTTPPrint_converterbrffreq(void);
void HTTPPrint_converterbatten(void);
void HTTPPrint_converterblo(void);
void HTTPPrint_outputpowerb(void);
void HTTPPrint_setpowerb(void);
void HTTPPrint_ALCb(void);
void HTTPPrint_Muteb(void);
void HTTPPrint_18Vctrl(void);
void HTTPPrint_24Vctrl(void);
void HTTPPrint_LNBREF(void);
void HTTPPrint_BUCREF(void);
void HTTPPrint_BUCCurrent(void);
void HTTPPrint_LNBCurrent(void);
void HTTPPrint_EXTREF(void);
void HTTPPrint_DeviceModel(void);
void HTTPPrint_DeviceSerial(void);
void HTTPPrint_maf(void);
void HTTPPrint_mas(void);
void HTTPPrint_config_dhcpchecked(void);
void HTTPPrint_MIP(void);
void HTTPPrint_config_mac(void);
void HTTPPrint_converteraalarm(void);
void HTTPPrint_converterbalarm(void);
void HTTPPrint_BUCIAlm(void);
void HTTPPrint_LNBIAlm(void);
void HTTPPrint_swmode(void);
void HTTPPrint_read_comm(WORD);
void HTTPPrint_write_comm(WORD);
void HTTPPrint_static_ip(void);
void HTTPPrint_ALCaSelected(WORD);
void HTTPPrint_MuteaSelected(WORD);
void HTTPPrint_ALCbSelected(WORD);
void HTTPPrint_MutebSelected(WORD);
void HTTPPrint_DC18VSelected(WORD);
void HTTPPrint_DC24VSelected(WORD);
void HTTPPrint_LNBREFSelected(WORD);
void HTTPPrint_BUCREFSelected(WORD);
void HTTPPrint_ClearBUCIAlm(WORD);
void HTTPPrint_ClearLNBIAlm(WORD);
void HTTPPrint_wri2cdata(void);
void HTTPPrint_rdi2cdata(void);
void HTTPPrint_dhcp_status(void);

void HTTPPrint(DWORD callbackID)
{
	switch(callbackID)
	{
        case 0x00000000:
			HTTPIncFile((ROM BYTE*)"header.inc");
			break;
        case 0x00000001:
			HTTPIncFile((ROM BYTE*)"footer.inc");
			break;
        case 0x00000002:
			HTTPPrint_config_ip();
			break;
        case 0x00000003:
			HTTPPrint_config_subnet();
			break;
        case 0x00000004:
			HTTPPrint_config_gw();
			break;
        case 0x00000005:
			HTTPPrint_Devicefwver();
			break;
        case 0x00000006:
			HTTPPrint_setpasscolor();
			break;
        case 0x00000007:
			HTTPPrint_setpass();
			break;
        case 0x00000008:
			HTTPPrint_converterarffreq();
			break;
        case 0x00000009:
			HTTPPrint_converteraatten();
			break;
        case 0x0000000a:
			HTTPPrint_converteralo();
			break;
        case 0x0000000b:
			HTTPPrint_outputpowera();
			break;
        case 0x0000000c:
			HTTPPrint_setpowera();
			break;
        case 0x0000000d:
			HTTPPrint_ALCa();
			break;
        case 0x0000000e:
			HTTPPrint_Mutea();
			break;
        case 0x0000000f:
			HTTPPrint_converterbrffreq();
			break;
        case 0x00000010:
			HTTPPrint_converterbatten();
			break;
        case 0x00000011:
			HTTPPrint_converterblo();
			break;
        case 0x00000012:
			HTTPPrint_outputpowerb();
			break;
        case 0x00000013:
			HTTPPrint_setpowerb();
			break;
        case 0x00000014:
			HTTPPrint_ALCb();
			break;
        case 0x00000015:
			HTTPPrint_Muteb();
			break;
        case 0x00000016:
			HTTPPrint_18Vctrl();
			break;
        case 0x00000017:
			HTTPPrint_24Vctrl();
			break;
        case 0x00000018:
			HTTPPrint_LNBREF();
			break;
        case 0x00000019:
			HTTPPrint_BUCREF();
			break;
        case 0x0000001a:
			HTTPPrint_BUCCurrent();
			break;
        case 0x0000001b:
			HTTPPrint_LNBCurrent();
			break;
        case 0x0000001c:
			HTTPPrint_EXTREF();
			break;
        case 0x0000001d:
			HTTPPrint_DeviceModel();
			break;
        case 0x0000001e:
			HTTPPrint_DeviceSerial();
			break;
        case 0x0000001f:
			HTTPPrint_maf();
			break;
        case 0x00000020:
			HTTPPrint_mas();
			break;
        case 0x00000021:
			HTTPPrint_config_dhcpchecked();
			break;
        case 0x00000022:
			HTTPPrint_MIP();
			break;
        case 0x00000023:
			HTTPPrint_config_mac();
			break;
        case 0x00000024:
			HTTPPrint_converteraalarm();
			break;
        case 0x00000025:
			HTTPPrint_converterbalarm();
			break;
        case 0x00000026:
			HTTPPrint_BUCIAlm();
			break;
        case 0x00000027:
			HTTPPrint_LNBIAlm();
			break;
        case 0x00000028:
			HTTPPrint_swmode();
			break;
        case 0x00000029:
			HTTPPrint_read_comm(0);
			break;
        case 0x0000002a:
			HTTPPrint_read_comm(1);
			break;
        case 0x0000002b:
			HTTPPrint_read_comm(2);
			break;
        case 0x0000002c:
			HTTPPrint_write_comm(0);
			break;
        case 0x0000002d:
			HTTPPrint_write_comm(1);
			break;
        case 0x0000002e:
			HTTPPrint_write_comm(2);
			break;
        case 0x0000002f:
			HTTPPrint_static_ip();
			break;
        case 0x00000030:
			HTTPPrint_ALCaSelected(TRUE);
			break;
        case 0x00000031:
			HTTPPrint_ALCaSelected(FALSE);
			break;
        case 0x00000032:
			HTTPPrint_MuteaSelected(TRUE);
			break;
        case 0x00000033:
			HTTPPrint_MuteaSelected(FALSE);
			break;
        case 0x00000034:
			HTTPPrint_ALCbSelected(TRUE);
			break;
        case 0x00000035:
			HTTPPrint_ALCbSelected(FALSE);
			break;
        case 0x00000036:
			HTTPPrint_MutebSelected(TRUE);
			break;
        case 0x00000037:
			HTTPPrint_MutebSelected(FALSE);
			break;
        case 0x00000038:
			HTTPPrint_DC18VSelected(TRUE);
			break;
        case 0x00000039:
			HTTPPrint_DC18VSelected(FALSE);
			break;
        case 0x0000003a:
			HTTPPrint_DC24VSelected(TRUE);
			break;
        case 0x0000003b:
			HTTPPrint_DC24VSelected(FALSE);
			break;
        case 0x0000003c:
			HTTPPrint_LNBREFSelected(TRUE);
			break;
        case 0x0000003d:
			HTTPPrint_LNBREFSelected(FALSE);
			break;
        case 0x0000003e:
			HTTPPrint_BUCREFSelected(TRUE);
			break;
        case 0x0000003f:
			HTTPPrint_BUCREFSelected(FALSE);
			break;
        case 0x00000040:
			HTTPPrint_ClearBUCIAlm(TRUE);
			break;
        case 0x00000041:
			HTTPPrint_ClearLNBIAlm(TRUE);
			break;
        case 0x00000042:
			HTTPPrint_wri2cdata();
			break;
        case 0x00000043:
			HTTPPrint_rdi2cdata();
			break;
        case 0x00000044:
			HTTPPrint_dhcp_status();
			break;
		default:
			// Output notification for undefined values
			TCPPutROMArray(sktHTTP, (ROM BYTE*)"!DEF", 4);
	}

	return;
}

void HTTPPrint_(void)
{
	TCPPut(sktHTTP, '~');
	return;
}

#endif

#endif
