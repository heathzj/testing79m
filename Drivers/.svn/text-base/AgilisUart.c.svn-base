/*
 * Copyright (C) 2012  ST Electronics (Satcom & Sensor Systems) Pte Ltd 
 *
 * Agilis UART Driver
 * 
 *
 */

#include "HardwareProfile.h"
#include "define.h"
#include "Global.h"
#include <usart.h>
#include "AgilisDriverManager.h"
#include "AgilisUart.h"
#include "UARTISR.h"
#include "AgilisProtocol.h"





uartDBC_t Uart0; 
uartDBC_t Uart1; 
uartDBC_t Uart2; 
uartDBC_t Uart3; 
#ifdef SUPPORT_2ND_DUALUART
uartDBC_t Uart4; 
#endif


// uart port 0  - connect to PC client
AgilisDriverDescriptor_t gUart0Table =
{
   	//(rom char*)"uart0", AgilisUart0Open, AgilisUart0Read, AgilisUart0Write, AgilisUart0ErrorReport, AgilisUart0Close
	(rom char*)"uart0", AgilisUart0Open, AgilisUart0Read, AgilisUart0Write
};

// uart port 1  - connect to ASRC/LCD client
AgilisDriverDescriptor_t gUart1Table =
{
   	//(rom char*)"uart1", AgilisUart1Open, AgilisUart1Ioctl, AgilisUart1Read, AgilisUart1Write, AgilisUart1ErrorReport, AgilisUart1Close
	(rom char*)"uart1", AgilisUart1Open, AgilisUart1Read, AgilisUart1Write
};

// uart port 2  - connect to power module server
AgilisDriverDescriptor_t gUart2Table =
{
	//(rom char*)"uart2", AgilisUart2Open, AgilisUart2Ioctl, AgilisUart2Read, AgilisUart2Write, AgilisUart2ErrorReport, AgilisUart2Close
	(rom char*)"uart2", AgilisUart2Open, AgilisUart2Read, AgilisUart2Write
};

// uart port 3  - connect to BUC server
AgilisDriverDescriptor_t gUart3Table =
{
	//(rom char*)"uart3", AgilisUart3Open, AgilisUart3Ioctl, AgilisUart3Read, AgilisUart3Write, AgilisUart3ErrorReport, AgilisUart3Close
	(rom char*)"uart3", AgilisUart3Open, AgilisUart3Read, AgilisUart3Write
};

#ifdef SUPPORT_2ND_DUALUART
// uart port 4  - connect to WiFi client
AgilisDriverDescriptor_t gUart4Table =
{
	//(rom char*)"uart4", AgilisUart4Open, AgilisUart4Ioctl, AgilisUart4Read, AgilisUart4Write, AgilisUart4ErrorReport, AgilisUart4Close
	(rom char*)"uart4", AgilisUart4Open, AgilisUart4Read, AgilisUart4Write
};
#endif

void AgilisUart0Init(UINT8 comMode)
{
	memset(&Uart0, 0, sizeof(Uart0));

	uart0init(&Uart0, comMode);

	// register Uart0 table to agilis driver manager
	AgilisDriverManagerRegister(&gUart0Table);
}


AgilisDriverDescriptor_t *AgilisUart0Open(rom char *name)
{
	return((AgilisDriverDescriptor_t *)&gUart0Table);
}

/*
UINT16 AgilisUart0Ioctl(void *pData, UINT16 u16Size)
{
#if 1
	return AgilisUartStatus_Ok;
#else
    AgilisDriverManagerIoctl_t *pIoctl = (AgilisDriverManagerIoctl_t *)pData;
	AgilisUartStatus_t status;

	status = AgilisUartStatus_Fail;
	
    switch (pIoctl->DevOp) {
        case AGILISDRIVERMANAGER_IOCTL_CONFIG:
        {
            AgilisUartConfig_t *pConfig = (AgilisUartConfig_t *) pIoctl;

            switch (pConfig->tIoctl.u32Param) {
                case AGILIS_UART_CONFIG_SET_BAUDRATE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_BAUDRATE_9600:
                         	  // zhang todo... set baudrate 9600 for uart0
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_BAUDRATE_115200:
                         	  // zhang todo... set baudrate 115200 for uart0
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

                case AGILIS_UART_CONFIG_SET_MODE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_MODE_RS232:
                         	  // zhang todo... set RS232 uart mode for uart0
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS485:
                         	  // zhang todo... set RS485 uart mode for uart0
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS422:
                         	  // zhang todo... set RS422 uart mode for uart0
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

            }
            break;
        } // end-DEV_IOCTL_CONFIG

    }

    return status;
#endif	
}
*/

UINT16 AgilisUart0Read(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		if (RCSTA1bits.OERR)
		{
			RCSTA1bits.CREN = 0; // 
			RCSTA1bits.CREN = 1; // 
		}
    	// get receive data from interrupt buffer
		if(Uart0.receiveflag == 1)
		{
			Uart0.receiveflag = 0;
			u16Size = UARTBufferTask(pData, &agilisUART0RxCircBuf);
		}else
		    u16Size = 0;
	}else
		u16Size = 0;

    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}


UINT16 AgilisUart0Write(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		Uart0.uartwrite((char*)pData);
	}else
		u16Size = 0;
	
    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}

/*
UINT16 AgilisUart0Close(void)
{
	// flush uart buffer?
	// ...
	
	return 1;
}

UINT16 AgilisUart0ErrorReport(void *pData, UINT16 u16Size)
{
	AgilisUartErrorReport_t *p = (AgilisUartErrorReport_t *)pData;
	
    //pthread_mutex_lock(&mutex);

	// todo... provide uart error count
	if(p){
		p->u32ParityErrorCnt 	=
		p->u32RxFrameErrorCnt 	=
		p->u32RxOverrunErrorCnt =
		p->u32TxOverrunErrorCnt = 0;
	}
	
    //pthread_mutex_unlock(&mutex);
    
    return AgilisUartStatus_Ok;
}
*/


void AgilisUart1Init(UINT8 comMode)
{
	memset(&Uart1, 0, sizeof(Uart1));

	uart1init(&Uart1, comMode);

	// register Uart1 table to agilis driver manager
	AgilisDriverManagerRegister(&gUart1Table);
}


AgilisDriverDescriptor_t *AgilisUart1Open(rom char *name)
{
	return((AgilisDriverDescriptor_t *)&gUart1Table);
}

/*
UINT16 AgilisUart1Ioctl(void *pData, UINT16 u16Size)
{
#if 1
	return AgilisUartStatus_Ok;
#else
    AgilisDriverManagerIoctl_t *pIoctl = (AgilisDriverManagerIoctl_t *)pData;
	AgilisUartStatus_t status;

	status = AgilisUartStatus_Fail;
	
    switch (pIoctl->DevOp) {
        case AGILISDRIVERMANAGER_IOCTL_CONFIG:
        {
            AgilisUartConfig_t *pConfig = (AgilisUartConfig_t *) pIoctl;

            switch (pConfig->tIoctl.u32Param) {
                case AGILIS_UART_CONFIG_SET_BAUDRATE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_BAUDRATE_9600:
                         	  // zhang todo... set baudrate 9600 for uart1
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_BAUDRATE_115200:
                         	  // zhang todo... set baudrate 115200 for uart1
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

                case AGILIS_UART_CONFIG_SET_MODE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_MODE_RS232:
                         	  // zhang todo... set RS232 uart mode for uart1
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS485:
                         	  // zhang todo... set RS485 uart mode for uart1
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS422:
                         	  // zhang todo... set RS422 uart mode for uart1
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

            }
            break;
        } // end-DEV_IOCTL_CONFIG

    }

    return status;
#endif	
}
*/

UINT16 AgilisUart1Read(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		if(RCSTA2bits.OERR)
		{
			RCSTA2bits.CREN = 0;
			RCSTA2bits.CREN = 1;
		}
    	// get receive data from interrupt buffer
		if(Uart1.receiveflag == 1)
		{
			Uart1.receiveflag = 0;

			u16Size = UARTBufferTask(pData, &agilisUART1RxCircBuf);
		}else
		    u16Size = 0;
	}else
		u16Size = 0;

    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}


UINT16 AgilisUart1Write(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		Uart1.uartwrite((char*)pData);
	}else
		u16Size = 0;
	
    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}

/*
UINT16 AgilisUart1Close(void)
{
	// flush uart buffer?
	// ...
	
	return 1;
}

UINT16 AgilisUart1ErrorReport(void *pData, UINT16 u16Size)
{
	AgilisUartErrorReport_t *p = (AgilisUartErrorReport_t *)pData;
	
    //pthread_mutex_lock(&mutex);

	// todo... provide uart error count
	if(p){
		p->u32ParityErrorCnt 	=
		p->u32RxFrameErrorCnt 	=
		p->u32RxOverrunErrorCnt =
		p->u32TxOverrunErrorCnt = 0;
	}
	
    //pthread_mutex_unlock(&mutex);
    
    return AgilisUartStatus_Ok;
}
*/

void AgilisUart2Init(UINT8 comMode)
{
	memset(&Uart2, 0, sizeof(Uart2));

	uart2init(&Uart2, comMode);

	// register Uart2 table to agilis driver manager
	AgilisDriverManagerRegister(&gUart2Table);
}


AgilisDriverDescriptor_t *AgilisUart2Open(rom char *name)
{
	return((AgilisDriverDescriptor_t *)&gUart2Table);
}

/*
UINT16 AgilisUart2Ioctl(void *pData, UINT16 u16Size)
{
#if 1
	return AgilisUartStatus_Ok;
#else
    AgilisDriverManagerIoctl_t *pIoctl = (AgilisDriverManagerIoctl_t *)pData;
	AgilisUartStatus_t status;

	status = AgilisUartStatus_Fail;
	
    switch (pIoctl->DevOp) {
        case AGILISDRIVERMANAGER_IOCTL_CONFIG:
        {
            AgilisUartConfig_t *pConfig = (AgilisUartConfig_t *) pIoctl;

            switch (pConfig->tIoctl.u32Param) {
                case AGILIS_UART_CONFIG_SET_BAUDRATE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_BAUDRATE_9600:
                         	  // zhang todo... set baudrate 9600 for uart2
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_BAUDRATE_115200:
                         	  // zhang todo... set baudrate 115200 for uart2
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

                case AGILIS_UART_CONFIG_SET_MODE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_MODE_RS232:
                         	  // zhang todo... set RS232 uart mode for uart2
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS485:
                         	  // zhang todo... set RS485 uart mode for uart2
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS422:
                         	  // zhang todo... set RS422 uart mode for uart2
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

            }
            break;
        } // end-DEV_IOCTL_CONFIG

    }

    return status;
#endif	
}
*/

UINT16 AgilisUart2Read(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		if(Uart2.receiveflag == 1)
		{
			Uart2.receiveflag = 0;

			u16Size = UARTBufferTask(pData, &agilisUART2RxCircBuf);
		}else
		    u16Size = 0;
	}else
		u16Size = 0;

    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}


UINT16 AgilisUart2Write(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		Uart2.uartwrite((char*)pData);
	}else
		u16Size = 0;
	
    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}

/*
UINT16 AgilisUart2Close(void)
{
	// flush uart buffer?
	// ...
	
	return 1;
}

UINT16 AgilisUart2ErrorReport(void *pData, UINT16 u16Size)
{
	AgilisUartErrorReport_t *p = (AgilisUartErrorReport_t *)pData;
	
    //pthread_mutex_lock(&mutex);

	// todo... provide uart error count
	if(p){
		p->u32ParityErrorCnt 	=
		p->u32RxFrameErrorCnt 	=
		p->u32RxOverrunErrorCnt =
		p->u32TxOverrunErrorCnt = 0;
	}
	
    //pthread_mutex_unlock(&mutex);
    
    return AgilisUartStatus_Ok;
}
*/

void AgilisUart3Init(UINT8 comMode)
{
	memset(&Uart3, 0, sizeof(Uart3));

	uart3init(&Uart3, comMode);

	// register Uart3 table to agilis driver manager
	AgilisDriverManagerRegister(&gUart3Table);
}


AgilisDriverDescriptor_t *AgilisUart3Open(rom char *name)
{
	return((AgilisDriverDescriptor_t *)&gUart3Table);
}

/*
UINT16 AgilisUart3Ioctl(void *pData, UINT16 u16Size)
{
#if 1
	return AgilisUartStatus_Ok;
#else
    AgilisDriverManagerIoctl_t *pIoctl = (AgilisDriverManagerIoctl_t *)pData;
	AgilisUartStatus_t status;

	status = AgilisUartStatus_Fail;
	
    switch (pIoctl->DevOp) {
        case AGILISDRIVERMANAGER_IOCTL_CONFIG:
        {
            AgilisUartConfig_t *pConfig = (AgilisUartConfig_t *) pIoctl;

            switch (pConfig->tIoctl.u32Param) {
                case AGILIS_UART_CONFIG_SET_BAUDRATE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_BAUDRATE_9600:
                         	  // zhang todo... set baudrate 9600 for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_BAUDRATE_115200:
                         	  // zhang todo... set baudrate 115200 for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

                case AGILIS_UART_CONFIG_SET_MODE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_MODE_RS232:
                         	  // zhang todo... set RS232 uart mode for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS485:
                         	  // zhang todo... set RS485 uart mode for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS422:
                         	  // zhang todo... set RS422 uart mode for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

            }
            break;
        } // end-DEV_IOCTL_CONFIG

    }

    return status;
#endif	
}
*/

UINT16 AgilisUart3Read(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		if(Uart3.receiveflag == 1)
		{
			Uart3.receiveflag = 0;

			u16Size = UARTBufferTask(pData, &agilisUART3RxCircBuf);
		}else
		    u16Size = 0;
	}else
		u16Size = 0;

    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}


UINT16 AgilisUart3Write(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		Uart3.uartwrite((char*)pData);
	}else
		u16Size = 0;
	
    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}

/*
UINT16 AgilisUart3Close(void)
{
	// flush uart buffer?
	// ...
	
	return 1;
}

UINT16 AgilisUart3ErrorReport(void *pData, UINT16 u16Size)
{
	AgilisUartErrorReport_t *p = (AgilisUartErrorReport_t *)pData;
	
    //pthread_mutex_lock(&mutex);

	// todo... provide uart error count
	if(p){
		p->u32ParityErrorCnt 	=
		p->u32RxFrameErrorCnt 	=
		p->u32RxOverrunErrorCnt =
		p->u32TxOverrunErrorCnt = 0;
	}
	
    //pthread_mutex_unlock(&mutex);
    
    return AgilisUartStatus_Ok;
}
*/

#ifdef SUPPORT_2ND_DUALUART
void AgilisUart4Init(UINT8 comMode)
{
	memset(&Uart4, 0, sizeof(Uart4));

	uart4init(&Uart4, comMode);

	// register Uart4 table to agilis driver manager
	AgilisDriverManagerRegister(&gUart4Table);
}


AgilisDriverDescriptor_t *AgilisUart4Open(rom char *name)
{
	return((AgilisDriverDescriptor_t *)&gUart4Table);
}

/*
UINT16 AgilisUart4Ioctl(void *pData, UINT16 u16Size)
{
#if 1
	return AgilisUartStatus_Ok;
#else
    AgilisDriverManagerIoctl_t *pIoctl = (AgilisDriverManagerIoctl_t *)pData;
	AgilisUartStatus_t status;

	status = AgilisUartStatus_Fail;
	
    switch (pIoctl->DevOp) {
        case AGILISDRIVERMANAGER_IOCTL_CONFIG:
        {
            AgilisUartConfig_t *pConfig = (AgilisUartConfig_t *) pIoctl;

            switch (pConfig->tIoctl.u32Param) {
                case AGILIS_UART_CONFIG_SET_BAUDRATE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_BAUDRATE_9600:
                         	  // zhang todo... set baudrate 9600 for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_BAUDRATE_115200:
                         	  // zhang todo... set baudrate 115200 for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

                case AGILIS_UART_CONFIG_SET_MODE:
                     //pthread_mutex_lock(&mutex);
                     switch (pConfig->u32Value) {
                         case AGILIS_UART_CONFIG_MODE_RS232:
                         	  // zhang todo... set RS232 uart mode for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS485:
                         	  // zhang todo... set RS485 uart mode for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;

                         case AGILIS_UART_CONFIG_MODE_RS422:
                         	  // zhang todo... set RS422 uart mode for uart3
                         	  status = AgilisUartStatus_Ok;
                              break;
                     }
                     //pthread_mutex_unlock(&mutex);
                     break;

            }
            break;
        } // end-DEV_IOCTL_CONFIG

    }

    return status;
#endif	
}
*/

UINT16 AgilisUart4Read(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		if(Uart4.receiveflag == 1)
		{
			Uart4.receiveflag = 0;

			u16Size = UARTBufferTask(pData, &agilisUART4RxCircBuf);
		}else
		    u16Size = 0;
	}else
		u16Size = 0;

    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}


UINT16 AgilisUart4Write(void *pData, UINT16 u16Size)
{
    //pthread_mutex_lock(&mutex);

	if(pData && u16Size){
		Uart4.uartwrite((char*)pData);
	}else
		u16Size = 0;
	
    //pthread_mutex_unlock(&mutex);
    
    return u16Size;
}

/*
UINT16 AgilisUart4Close(void)
{
	// flush uart buffer?
	// ...
	
	return 1;
}

UINT16 AgilisUart4ErrorReport(void *pData, UINT16 u16Size)
{
	AgilisUartErrorReport_t *p = (AgilisUartErrorReport_t *)pData;
	
    //pthread_mutex_lock(&mutex);

	// todo... provide uart error count
	if(p){
		p->u32ParityErrorCnt 	=
		p->u32RxFrameErrorCnt 	=
		p->u32RxOverrunErrorCnt =
		p->u32TxOverrunErrorCnt = 0;
	}
	
    //pthread_mutex_unlock(&mutex);
    
    return AgilisUartStatus_Ok;
}
*/
#endif //#ifdef SUPPORT_2ND_DUALUART


#if 0 // debug only

extern UINT8 gAgilisReadBuf[AGILIS_PROTOCOL_UARTBUF_SIZE];
extern UINT8 gAgilisWriteBuf[AGILIS_PROTOCOL_UARTBUF_SIZE];

static void UartPrintPgm(rom char* str)
{
	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen("uart0");
	if(pUartPort){
		strcpypgm2ram(gAgilisWriteBuf, str);
		pUartPort->Write(gAgilisWriteBuf, strlenpgm(str));
	}
} 

void AgilisUartTestWrite(rom char* pUartName, rom char *pData)
{
	UINT16 u16ByteSent, u16ByteRead, u16CmdLen;
	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen(pUartName);
	
	if(pUartPort){
		strcpypgm2ram(gAgilisWriteBuf, pData);
		strcatpgm2ram(gAgilisWriteBuf, "\r");
		u16CmdLen = strlen(gAgilisWriteBuf);
		u16ByteSent = pUartPort->Write(gAgilisWriteBuf, u16CmdLen );
		DelayMS(5);
	}
	
}

void AgilisUartTestRead(rom char* pUartName)
{
	UINT16 u16StrLen;
	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen(pUartName);
	
	if(pUartPort){
		memset(gAgilisReadBuf, 0, sizeof(gAgilisReadBuf));
		u16StrLen = pUartPort->Read(gAgilisReadBuf, 50);
		if(u16StrLen){
			strcpypgm2ram(gAgilisWriteBuf, pUartName);
			strcatpgm2ram(gAgilisWriteBuf, " received: ");
			strcat(gAgilisWriteBuf, gAgilisReadBuf);
			u16StrLen = strlen(gAgilisReadBuf);
 			pUartPort->Write(gAgilisWriteBuf, u16StrLen);
		}else{
			//UartPrintPgm("received nothing\r");
		}
	}
}

void AgilisUartTestDumpReadBuf(rom char* pUartName)
{
	UINT16 u16StrLen;
	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen(pUartName);
	
	if(pUartPort){
		memset(gAgilisWriteBuf, 0, sizeof(gAgilisWriteBuf));
		strcpypgm2ram(gAgilisWriteBuf, pUartName);
		strcatpgm2ram(gAgilisWriteBuf, ": ");
		strcat(gAgilisWriteBuf, gAgilisReadBuf);
		u16StrLen = strlen(gAgilisReadBuf);
		pUartPort->Write(gAgilisWriteBuf, u16StrLen);
	}
}

void debugPrintf2(rom char *str)
{
 	AgilisUartTestWrite((rom char*)"uart0", str);
}

void debugPrintfRAM(char *str)
{
	UINT16 u16ByteSent, u16ByteRead, u16CmdLen;
	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen("uart0");
	
	if(pUartPort){
		strcpy(gAgilisWriteBuf, str);
		strcatpgm2ram(gAgilisWriteBuf, "\r");
		u16CmdLen = strlen(gAgilisWriteBuf);
		u16ByteSent = pUartPort->Write(gAgilisWriteBuf, u16CmdLen );
		DelayMS(5);
	}
}

void debugPrintfByte(rom char *str, BYTE data)
{
	UINT16 u16ByteSent, u16ByteRead, u16CmdLen;
	char dataStr[3];

	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen("uart0");
	
	if(pUartPort){
		strcpypgm2ram(gAgilisWriteBuf, str);
		HEXto2ASC(data, dataStr);
		dataStr[2]=0;
		strcat(gAgilisWriteBuf, dataStr);
		strcatpgm2ram(gAgilisWriteBuf, "\r");
		u16CmdLen = strlen(gAgilisWriteBuf);
		u16ByteSent = pUartPort->Write(gAgilisWriteBuf, u16CmdLen );
		DelayMS(2);
	}
}

void debugPrintfWord(rom char *str, WORD data)
{
	UINT16 u16ByteSent, u16ByteRead, u16CmdLen;
	char dataStr[5];

	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen("uart0");
	
	if(pUartPort){
		strcpypgm2ram(gAgilisWriteBuf, str);
		HEXto2ASC(data>>8, &dataStr[0]);
		HEXto2ASC(data&0xFF, &dataStr[2]);
		dataStr[4]=0;
		strcat(gAgilisWriteBuf, dataStr);
		strcatpgm2ram(gAgilisWriteBuf, "\r");
		u16CmdLen = strlen(gAgilisWriteBuf);
		u16ByteSent = pUartPort->Write(gAgilisWriteBuf, u16CmdLen );
		DelayMS(2);
	}
}

void debugPrintfDword(rom char *str, DWORD data)
{
	UINT16 u16ByteSent, u16ByteRead, u16CmdLen;
	char dataStr[9];

	AgilisDriverDescriptor_t *pUartPort=NULL;
	pUartPort = AgilisDriverManagerOpen("uart0");
	
	if(pUartPort){
		strcpypgm2ram(gAgilisWriteBuf, str);
		HEXto2ASC((data>>24)&0xFF, &dataStr[0]);
		HEXto2ASC((data>>16)&0xFF, &dataStr[2]);
		HEXto2ASC((data>>8)&0xFF, &dataStr[4]);
		HEXto2ASC(data&0xFF, &dataStr[6]);
		dataStr[8]=0;
		strcat(gAgilisWriteBuf, dataStr);
		strcatpgm2ram(gAgilisWriteBuf, "\r");
		u16CmdLen = strlen(gAgilisWriteBuf);
		u16ByteSent = pUartPort->Write(gAgilisWriteBuf, u16CmdLen );
		DelayMS(2);
	}
}

#endif //#if 1
